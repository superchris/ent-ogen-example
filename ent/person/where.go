// Code generated by ent, DO NOT EDIT.

package person

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/superchris/ent-ogen-example/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Person {
	return predicate.Person(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Person {
	return predicate.Person(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Person {
	return predicate.Person(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Person {
	return predicate.Person(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Person {
	return predicate.Person(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Person {
	return predicate.Person(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Person {
	return predicate.Person(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Person {
	return predicate.Person(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Person {
	return predicate.Person(sql.FieldLTE(FieldID, id))
}

// FirstName applies equality check predicate on the "firstName" field. It's identical to FirstNameEQ.
func FirstName(v string) predicate.Person {
	return predicate.Person(sql.FieldEQ(FieldFirstName, v))
}

// LastName applies equality check predicate on the "lastName" field. It's identical to LastNameEQ.
func LastName(v string) predicate.Person {
	return predicate.Person(sql.FieldEQ(FieldLastName, v))
}

// Email applies equality check predicate on the "email" field. It's identical to EmailEQ.
func Email(v string) predicate.Person {
	return predicate.Person(sql.FieldEQ(FieldEmail, v))
}

// Salary applies equality check predicate on the "salary" field. It's identical to SalaryEQ.
func Salary(v float32) predicate.Person {
	return predicate.Person(sql.FieldEQ(FieldSalary, v))
}

// BirthDate applies equality check predicate on the "birthDate" field. It's identical to BirthDateEQ.
func BirthDate(v time.Time) predicate.Person {
	return predicate.Person(sql.FieldEQ(FieldBirthDate, v))
}

// FirstNameEQ applies the EQ predicate on the "firstName" field.
func FirstNameEQ(v string) predicate.Person {
	return predicate.Person(sql.FieldEQ(FieldFirstName, v))
}

// FirstNameNEQ applies the NEQ predicate on the "firstName" field.
func FirstNameNEQ(v string) predicate.Person {
	return predicate.Person(sql.FieldNEQ(FieldFirstName, v))
}

// FirstNameIn applies the In predicate on the "firstName" field.
func FirstNameIn(vs ...string) predicate.Person {
	return predicate.Person(sql.FieldIn(FieldFirstName, vs...))
}

// FirstNameNotIn applies the NotIn predicate on the "firstName" field.
func FirstNameNotIn(vs ...string) predicate.Person {
	return predicate.Person(sql.FieldNotIn(FieldFirstName, vs...))
}

// FirstNameGT applies the GT predicate on the "firstName" field.
func FirstNameGT(v string) predicate.Person {
	return predicate.Person(sql.FieldGT(FieldFirstName, v))
}

// FirstNameGTE applies the GTE predicate on the "firstName" field.
func FirstNameGTE(v string) predicate.Person {
	return predicate.Person(sql.FieldGTE(FieldFirstName, v))
}

// FirstNameLT applies the LT predicate on the "firstName" field.
func FirstNameLT(v string) predicate.Person {
	return predicate.Person(sql.FieldLT(FieldFirstName, v))
}

// FirstNameLTE applies the LTE predicate on the "firstName" field.
func FirstNameLTE(v string) predicate.Person {
	return predicate.Person(sql.FieldLTE(FieldFirstName, v))
}

// FirstNameContains applies the Contains predicate on the "firstName" field.
func FirstNameContains(v string) predicate.Person {
	return predicate.Person(sql.FieldContains(FieldFirstName, v))
}

// FirstNameHasPrefix applies the HasPrefix predicate on the "firstName" field.
func FirstNameHasPrefix(v string) predicate.Person {
	return predicate.Person(sql.FieldHasPrefix(FieldFirstName, v))
}

// FirstNameHasSuffix applies the HasSuffix predicate on the "firstName" field.
func FirstNameHasSuffix(v string) predicate.Person {
	return predicate.Person(sql.FieldHasSuffix(FieldFirstName, v))
}

// FirstNameEqualFold applies the EqualFold predicate on the "firstName" field.
func FirstNameEqualFold(v string) predicate.Person {
	return predicate.Person(sql.FieldEqualFold(FieldFirstName, v))
}

// FirstNameContainsFold applies the ContainsFold predicate on the "firstName" field.
func FirstNameContainsFold(v string) predicate.Person {
	return predicate.Person(sql.FieldContainsFold(FieldFirstName, v))
}

// LastNameEQ applies the EQ predicate on the "lastName" field.
func LastNameEQ(v string) predicate.Person {
	return predicate.Person(sql.FieldEQ(FieldLastName, v))
}

// LastNameNEQ applies the NEQ predicate on the "lastName" field.
func LastNameNEQ(v string) predicate.Person {
	return predicate.Person(sql.FieldNEQ(FieldLastName, v))
}

// LastNameIn applies the In predicate on the "lastName" field.
func LastNameIn(vs ...string) predicate.Person {
	return predicate.Person(sql.FieldIn(FieldLastName, vs...))
}

// LastNameNotIn applies the NotIn predicate on the "lastName" field.
func LastNameNotIn(vs ...string) predicate.Person {
	return predicate.Person(sql.FieldNotIn(FieldLastName, vs...))
}

// LastNameGT applies the GT predicate on the "lastName" field.
func LastNameGT(v string) predicate.Person {
	return predicate.Person(sql.FieldGT(FieldLastName, v))
}

// LastNameGTE applies the GTE predicate on the "lastName" field.
func LastNameGTE(v string) predicate.Person {
	return predicate.Person(sql.FieldGTE(FieldLastName, v))
}

// LastNameLT applies the LT predicate on the "lastName" field.
func LastNameLT(v string) predicate.Person {
	return predicate.Person(sql.FieldLT(FieldLastName, v))
}

// LastNameLTE applies the LTE predicate on the "lastName" field.
func LastNameLTE(v string) predicate.Person {
	return predicate.Person(sql.FieldLTE(FieldLastName, v))
}

// LastNameContains applies the Contains predicate on the "lastName" field.
func LastNameContains(v string) predicate.Person {
	return predicate.Person(sql.FieldContains(FieldLastName, v))
}

// LastNameHasPrefix applies the HasPrefix predicate on the "lastName" field.
func LastNameHasPrefix(v string) predicate.Person {
	return predicate.Person(sql.FieldHasPrefix(FieldLastName, v))
}

// LastNameHasSuffix applies the HasSuffix predicate on the "lastName" field.
func LastNameHasSuffix(v string) predicate.Person {
	return predicate.Person(sql.FieldHasSuffix(FieldLastName, v))
}

// LastNameEqualFold applies the EqualFold predicate on the "lastName" field.
func LastNameEqualFold(v string) predicate.Person {
	return predicate.Person(sql.FieldEqualFold(FieldLastName, v))
}

// LastNameContainsFold applies the ContainsFold predicate on the "lastName" field.
func LastNameContainsFold(v string) predicate.Person {
	return predicate.Person(sql.FieldContainsFold(FieldLastName, v))
}

// EmailEQ applies the EQ predicate on the "email" field.
func EmailEQ(v string) predicate.Person {
	return predicate.Person(sql.FieldEQ(FieldEmail, v))
}

// EmailNEQ applies the NEQ predicate on the "email" field.
func EmailNEQ(v string) predicate.Person {
	return predicate.Person(sql.FieldNEQ(FieldEmail, v))
}

// EmailIn applies the In predicate on the "email" field.
func EmailIn(vs ...string) predicate.Person {
	return predicate.Person(sql.FieldIn(FieldEmail, vs...))
}

// EmailNotIn applies the NotIn predicate on the "email" field.
func EmailNotIn(vs ...string) predicate.Person {
	return predicate.Person(sql.FieldNotIn(FieldEmail, vs...))
}

// EmailGT applies the GT predicate on the "email" field.
func EmailGT(v string) predicate.Person {
	return predicate.Person(sql.FieldGT(FieldEmail, v))
}

// EmailGTE applies the GTE predicate on the "email" field.
func EmailGTE(v string) predicate.Person {
	return predicate.Person(sql.FieldGTE(FieldEmail, v))
}

// EmailLT applies the LT predicate on the "email" field.
func EmailLT(v string) predicate.Person {
	return predicate.Person(sql.FieldLT(FieldEmail, v))
}

// EmailLTE applies the LTE predicate on the "email" field.
func EmailLTE(v string) predicate.Person {
	return predicate.Person(sql.FieldLTE(FieldEmail, v))
}

// EmailContains applies the Contains predicate on the "email" field.
func EmailContains(v string) predicate.Person {
	return predicate.Person(sql.FieldContains(FieldEmail, v))
}

// EmailHasPrefix applies the HasPrefix predicate on the "email" field.
func EmailHasPrefix(v string) predicate.Person {
	return predicate.Person(sql.FieldHasPrefix(FieldEmail, v))
}

// EmailHasSuffix applies the HasSuffix predicate on the "email" field.
func EmailHasSuffix(v string) predicate.Person {
	return predicate.Person(sql.FieldHasSuffix(FieldEmail, v))
}

// EmailEqualFold applies the EqualFold predicate on the "email" field.
func EmailEqualFold(v string) predicate.Person {
	return predicate.Person(sql.FieldEqualFold(FieldEmail, v))
}

// EmailContainsFold applies the ContainsFold predicate on the "email" field.
func EmailContainsFold(v string) predicate.Person {
	return predicate.Person(sql.FieldContainsFold(FieldEmail, v))
}

// SalaryEQ applies the EQ predicate on the "salary" field.
func SalaryEQ(v float32) predicate.Person {
	return predicate.Person(sql.FieldEQ(FieldSalary, v))
}

// SalaryNEQ applies the NEQ predicate on the "salary" field.
func SalaryNEQ(v float32) predicate.Person {
	return predicate.Person(sql.FieldNEQ(FieldSalary, v))
}

// SalaryIn applies the In predicate on the "salary" field.
func SalaryIn(vs ...float32) predicate.Person {
	return predicate.Person(sql.FieldIn(FieldSalary, vs...))
}

// SalaryNotIn applies the NotIn predicate on the "salary" field.
func SalaryNotIn(vs ...float32) predicate.Person {
	return predicate.Person(sql.FieldNotIn(FieldSalary, vs...))
}

// SalaryGT applies the GT predicate on the "salary" field.
func SalaryGT(v float32) predicate.Person {
	return predicate.Person(sql.FieldGT(FieldSalary, v))
}

// SalaryGTE applies the GTE predicate on the "salary" field.
func SalaryGTE(v float32) predicate.Person {
	return predicate.Person(sql.FieldGTE(FieldSalary, v))
}

// SalaryLT applies the LT predicate on the "salary" field.
func SalaryLT(v float32) predicate.Person {
	return predicate.Person(sql.FieldLT(FieldSalary, v))
}

// SalaryLTE applies the LTE predicate on the "salary" field.
func SalaryLTE(v float32) predicate.Person {
	return predicate.Person(sql.FieldLTE(FieldSalary, v))
}

// BirthDateEQ applies the EQ predicate on the "birthDate" field.
func BirthDateEQ(v time.Time) predicate.Person {
	return predicate.Person(sql.FieldEQ(FieldBirthDate, v))
}

// BirthDateNEQ applies the NEQ predicate on the "birthDate" field.
func BirthDateNEQ(v time.Time) predicate.Person {
	return predicate.Person(sql.FieldNEQ(FieldBirthDate, v))
}

// BirthDateIn applies the In predicate on the "birthDate" field.
func BirthDateIn(vs ...time.Time) predicate.Person {
	return predicate.Person(sql.FieldIn(FieldBirthDate, vs...))
}

// BirthDateNotIn applies the NotIn predicate on the "birthDate" field.
func BirthDateNotIn(vs ...time.Time) predicate.Person {
	return predicate.Person(sql.FieldNotIn(FieldBirthDate, vs...))
}

// BirthDateGT applies the GT predicate on the "birthDate" field.
func BirthDateGT(v time.Time) predicate.Person {
	return predicate.Person(sql.FieldGT(FieldBirthDate, v))
}

// BirthDateGTE applies the GTE predicate on the "birthDate" field.
func BirthDateGTE(v time.Time) predicate.Person {
	return predicate.Person(sql.FieldGTE(FieldBirthDate, v))
}

// BirthDateLT applies the LT predicate on the "birthDate" field.
func BirthDateLT(v time.Time) predicate.Person {
	return predicate.Person(sql.FieldLT(FieldBirthDate, v))
}

// BirthDateLTE applies the LTE predicate on the "birthDate" field.
func BirthDateLTE(v time.Time) predicate.Person {
	return predicate.Person(sql.FieldLTE(FieldBirthDate, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Person) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Person) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Person) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		p(s.Not())
	})
}
