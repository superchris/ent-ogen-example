// Code generated by ent, DO NOT EDIT.

package ogent

import (
	"context"
	"net/http"

	"github.com/go-faster/jx"
	"github.com/superchris/ent-ogen-example/ent"
	"github.com/superchris/ent-ogen-example/ent/person"
)

// OgentHandler implements the ogen generated Handler interface and uses Ent as data layer.
type OgentHandler struct {
	client *ent.Client
}

// NewOgentHandler returns a new OgentHandler.
func NewOgentHandler(c *ent.Client) *OgentHandler { return &OgentHandler{c} }

// rawError renders err as json string.
func rawError(err error) jx.Raw {
	var e jx.Encoder
	e.Str(err.Error())
	return e.Bytes()
}

// CreatePerson handles POST /persons requests.
func (h *OgentHandler) CreatePerson(ctx context.Context, req *CreatePersonReq) (CreatePersonRes, error) {
	b := h.client.Person.Create()
	// Add all fields.
	b.SetFirstName(req.FirstName)
	b.SetLastName(req.LastName)
	b.SetEmail(req.Email)
	b.SetSalary(req.Salary)
	b.SetBirthDate(req.BirthDate)
	// Add all edges.
	// Persist to storage.
	e, err := b.Save(ctx)
	if err != nil {
		switch {
		case ent.IsNotSingular(err):
			return &R409{
				Code:   http.StatusConflict,
				Status: http.StatusText(http.StatusConflict),
				Errors: rawError(err),
			}, nil
		case ent.IsConstraintError(err):
			return &R409{
				Code:   http.StatusConflict,
				Status: http.StatusText(http.StatusConflict),
				Errors: rawError(err),
			}, nil
		default:
			// Let the server handle the error.
			return nil, err
		}
	}
	// Reload the entity to attach all eager-loaded edges.
	q := h.client.Person.Query().Where(person.ID(e.ID))
	e, err = q.Only(ctx)
	if err != nil {
		// This should never happen.
		return nil, err
	}
	return NewPersonCreate(e), nil
}

// ReadPerson handles GET /persons/{id} requests.
func (h *OgentHandler) ReadPerson(ctx context.Context, params ReadPersonParams) (ReadPersonRes, error) {
	q := h.client.Person.Query().Where(person.IDEQ(params.ID))
	e, err := q.Only(ctx)
	if err != nil {
		switch {
		case ent.IsNotFound(err):
			return &R404{
				Code:   http.StatusNotFound,
				Status: http.StatusText(http.StatusNotFound),
				Errors: rawError(err),
			}, nil
		case ent.IsNotSingular(err):
			return &R409{
				Code:   http.StatusConflict,
				Status: http.StatusText(http.StatusConflict),
				Errors: rawError(err),
			}, nil
		default:
			// Let the server handle the error.
			return nil, err
		}
	}
	return NewPersonRead(e), nil
}

// UpdatePerson handles PATCH /persons/{id} requests.
func (h *OgentHandler) UpdatePerson(ctx context.Context, req *UpdatePersonReq, params UpdatePersonParams) (UpdatePersonRes, error) {
	b := h.client.Person.UpdateOneID(params.ID)
	// Add all fields.
	if v, ok := req.FirstName.Get(); ok {
		b.SetFirstName(v)
	}
	if v, ok := req.LastName.Get(); ok {
		b.SetLastName(v)
	}
	if v, ok := req.Email.Get(); ok {
		b.SetEmail(v)
	}
	if v, ok := req.Salary.Get(); ok {
		b.SetSalary(v)
	}
	if v, ok := req.BirthDate.Get(); ok {
		b.SetBirthDate(v)
	}
	// Add all edges.
	// Persist to storage.
	e, err := b.Save(ctx)
	if err != nil {
		switch {
		case ent.IsNotFound(err):
			return &R404{
				Code:   http.StatusNotFound,
				Status: http.StatusText(http.StatusNotFound),
				Errors: rawError(err),
			}, nil
		case ent.IsConstraintError(err):
			return &R409{
				Code:   http.StatusConflict,
				Status: http.StatusText(http.StatusConflict),
				Errors: rawError(err),
			}, nil
		default:
			// Let the server handle the error.
			return nil, err
		}
	}
	// Reload the entity to attach all eager-loaded edges.
	q := h.client.Person.Query().Where(person.ID(e.ID))
	e, err = q.Only(ctx)
	if err != nil {
		// This should never happen.
		return nil, err
	}
	return NewPersonUpdate(e), nil
}

// DeletePerson handles DELETE /persons/{id} requests.
func (h *OgentHandler) DeletePerson(ctx context.Context, params DeletePersonParams) (DeletePersonRes, error) {
	err := h.client.Person.DeleteOneID(params.ID).Exec(ctx)
	if err != nil {
		switch {
		case ent.IsNotFound(err):
			return &R404{
				Code:   http.StatusNotFound,
				Status: http.StatusText(http.StatusNotFound),
				Errors: rawError(err),
			}, nil
		case ent.IsConstraintError(err):
			return &R409{
				Code:   http.StatusConflict,
				Status: http.StatusText(http.StatusConflict),
				Errors: rawError(err),
			}, nil
		default:
			// Let the server handle the error.
			return nil, err
		}
	}
	return new(DeletePersonNoContent), nil

}

// ListPerson handles GET /persons requests.
func (h *OgentHandler) ListPerson(ctx context.Context, params ListPersonParams) (ListPersonRes, error) {
	q := h.client.Person.Query()
	page := 1
	if v, ok := params.Page.Get(); ok {
		page = v
	}
	itemsPerPage := 30
	if v, ok := params.ItemsPerPage.Get(); ok {
		itemsPerPage = v
	}
	q.Limit(itemsPerPage).Offset((page - 1) * itemsPerPage)

	es, err := q.All(ctx)
	if err != nil {
		switch {
		case ent.IsNotFound(err):
			return &R404{
				Code:   http.StatusNotFound,
				Status: http.StatusText(http.StatusNotFound),
				Errors: rawError(err),
			}, nil
		case ent.IsNotSingular(err):
			return &R409{
				Code:   http.StatusConflict,
				Status: http.StatusText(http.StatusConflict),
				Errors: rawError(err),
			}, nil
		default:
			// Let the server handle the error.
			return nil, err
		}
	}
	r := NewPersonLists(es)
	return (*ListPersonOKApplicationJSON)(&r), nil
}
