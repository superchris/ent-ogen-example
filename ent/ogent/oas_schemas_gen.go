// Code generated by ogen, DO NOT EDIT.

package ogent

import (
	"time"

	"github.com/go-faster/jx"
)

type CreatePersonReq struct {
	FirstName string    `json:"firstName"`
	LastName  string    `json:"lastName"`
	Email     string    `json:"email"`
	Salary    float32   `json:"salary"`
	BirthDate time.Time `json:"birthDate"`
}

// GetFirstName returns the value of FirstName.
func (s *CreatePersonReq) GetFirstName() string {
	return s.FirstName
}

// GetLastName returns the value of LastName.
func (s *CreatePersonReq) GetLastName() string {
	return s.LastName
}

// GetEmail returns the value of Email.
func (s *CreatePersonReq) GetEmail() string {
	return s.Email
}

// GetSalary returns the value of Salary.
func (s *CreatePersonReq) GetSalary() float32 {
	return s.Salary
}

// GetBirthDate returns the value of BirthDate.
func (s *CreatePersonReq) GetBirthDate() time.Time {
	return s.BirthDate
}

// SetFirstName sets the value of FirstName.
func (s *CreatePersonReq) SetFirstName(val string) {
	s.FirstName = val
}

// SetLastName sets the value of LastName.
func (s *CreatePersonReq) SetLastName(val string) {
	s.LastName = val
}

// SetEmail sets the value of Email.
func (s *CreatePersonReq) SetEmail(val string) {
	s.Email = val
}

// SetSalary sets the value of Salary.
func (s *CreatePersonReq) SetSalary(val float32) {
	s.Salary = val
}

// SetBirthDate sets the value of BirthDate.
func (s *CreatePersonReq) SetBirthDate(val time.Time) {
	s.BirthDate = val
}

// DeletePersonNoContent is response for DeletePerson operation.
type DeletePersonNoContent struct{}

func (*DeletePersonNoContent) deletePersonRes() {}

type ListPersonOKApplicationJSON []PersonList

func (*ListPersonOKApplicationJSON) listPersonRes() {}

// NewOptDateTime returns new OptDateTime with value set to v.
func NewOptDateTime(v time.Time) OptDateTime {
	return OptDateTime{
		Value: v,
		Set:   true,
	}
}

// OptDateTime is optional time.Time.
type OptDateTime struct {
	Value time.Time
	Set   bool
}

// IsSet returns true if OptDateTime was set.
func (o OptDateTime) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDateTime) Reset() {
	var v time.Time
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDateTime) SetTo(v time.Time) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDateTime) Get() (v time.Time, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDateTime) Or(d time.Time) time.Time {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptFloat32 returns new OptFloat32 with value set to v.
func NewOptFloat32(v float32) OptFloat32 {
	return OptFloat32{
		Value: v,
		Set:   true,
	}
}

// OptFloat32 is optional float32.
type OptFloat32 struct {
	Value float32
	Set   bool
}

// IsSet returns true if OptFloat32 was set.
func (o OptFloat32) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptFloat32) Reset() {
	var v float32
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptFloat32) SetTo(v float32) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptFloat32) Get() (v float32, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptFloat32) Or(d float32) float32 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt returns new OptInt with value set to v.
func NewOptInt(v int) OptInt {
	return OptInt{
		Value: v,
		Set:   true,
	}
}

// OptInt is optional int.
type OptInt struct {
	Value int
	Set   bool
}

// IsSet returns true if OptInt was set.
func (o OptInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt) SetTo(v int) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt) Get() (v int, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Ref: #/components/schemas/PersonCreate
type PersonCreate struct {
	ID        int       `json:"id"`
	FirstName string    `json:"firstName"`
	LastName  string    `json:"lastName"`
	Email     string    `json:"email"`
	Salary    float32   `json:"salary"`
	BirthDate time.Time `json:"birthDate"`
}

// GetID returns the value of ID.
func (s *PersonCreate) GetID() int {
	return s.ID
}

// GetFirstName returns the value of FirstName.
func (s *PersonCreate) GetFirstName() string {
	return s.FirstName
}

// GetLastName returns the value of LastName.
func (s *PersonCreate) GetLastName() string {
	return s.LastName
}

// GetEmail returns the value of Email.
func (s *PersonCreate) GetEmail() string {
	return s.Email
}

// GetSalary returns the value of Salary.
func (s *PersonCreate) GetSalary() float32 {
	return s.Salary
}

// GetBirthDate returns the value of BirthDate.
func (s *PersonCreate) GetBirthDate() time.Time {
	return s.BirthDate
}

// SetID sets the value of ID.
func (s *PersonCreate) SetID(val int) {
	s.ID = val
}

// SetFirstName sets the value of FirstName.
func (s *PersonCreate) SetFirstName(val string) {
	s.FirstName = val
}

// SetLastName sets the value of LastName.
func (s *PersonCreate) SetLastName(val string) {
	s.LastName = val
}

// SetEmail sets the value of Email.
func (s *PersonCreate) SetEmail(val string) {
	s.Email = val
}

// SetSalary sets the value of Salary.
func (s *PersonCreate) SetSalary(val float32) {
	s.Salary = val
}

// SetBirthDate sets the value of BirthDate.
func (s *PersonCreate) SetBirthDate(val time.Time) {
	s.BirthDate = val
}

func (*PersonCreate) createPersonRes() {}

// Ref: #/components/schemas/PersonList
type PersonList struct {
	ID        int       `json:"id"`
	FirstName string    `json:"firstName"`
	LastName  string    `json:"lastName"`
	Email     string    `json:"email"`
	Salary    float32   `json:"salary"`
	BirthDate time.Time `json:"birthDate"`
}

// GetID returns the value of ID.
func (s *PersonList) GetID() int {
	return s.ID
}

// GetFirstName returns the value of FirstName.
func (s *PersonList) GetFirstName() string {
	return s.FirstName
}

// GetLastName returns the value of LastName.
func (s *PersonList) GetLastName() string {
	return s.LastName
}

// GetEmail returns the value of Email.
func (s *PersonList) GetEmail() string {
	return s.Email
}

// GetSalary returns the value of Salary.
func (s *PersonList) GetSalary() float32 {
	return s.Salary
}

// GetBirthDate returns the value of BirthDate.
func (s *PersonList) GetBirthDate() time.Time {
	return s.BirthDate
}

// SetID sets the value of ID.
func (s *PersonList) SetID(val int) {
	s.ID = val
}

// SetFirstName sets the value of FirstName.
func (s *PersonList) SetFirstName(val string) {
	s.FirstName = val
}

// SetLastName sets the value of LastName.
func (s *PersonList) SetLastName(val string) {
	s.LastName = val
}

// SetEmail sets the value of Email.
func (s *PersonList) SetEmail(val string) {
	s.Email = val
}

// SetSalary sets the value of Salary.
func (s *PersonList) SetSalary(val float32) {
	s.Salary = val
}

// SetBirthDate sets the value of BirthDate.
func (s *PersonList) SetBirthDate(val time.Time) {
	s.BirthDate = val
}

// Ref: #/components/schemas/PersonRead
type PersonRead struct {
	ID        int       `json:"id"`
	FirstName string    `json:"firstName"`
	LastName  string    `json:"lastName"`
	Email     string    `json:"email"`
	Salary    float32   `json:"salary"`
	BirthDate time.Time `json:"birthDate"`
}

// GetID returns the value of ID.
func (s *PersonRead) GetID() int {
	return s.ID
}

// GetFirstName returns the value of FirstName.
func (s *PersonRead) GetFirstName() string {
	return s.FirstName
}

// GetLastName returns the value of LastName.
func (s *PersonRead) GetLastName() string {
	return s.LastName
}

// GetEmail returns the value of Email.
func (s *PersonRead) GetEmail() string {
	return s.Email
}

// GetSalary returns the value of Salary.
func (s *PersonRead) GetSalary() float32 {
	return s.Salary
}

// GetBirthDate returns the value of BirthDate.
func (s *PersonRead) GetBirthDate() time.Time {
	return s.BirthDate
}

// SetID sets the value of ID.
func (s *PersonRead) SetID(val int) {
	s.ID = val
}

// SetFirstName sets the value of FirstName.
func (s *PersonRead) SetFirstName(val string) {
	s.FirstName = val
}

// SetLastName sets the value of LastName.
func (s *PersonRead) SetLastName(val string) {
	s.LastName = val
}

// SetEmail sets the value of Email.
func (s *PersonRead) SetEmail(val string) {
	s.Email = val
}

// SetSalary sets the value of Salary.
func (s *PersonRead) SetSalary(val float32) {
	s.Salary = val
}

// SetBirthDate sets the value of BirthDate.
func (s *PersonRead) SetBirthDate(val time.Time) {
	s.BirthDate = val
}

func (*PersonRead) readPersonRes() {}

// Ref: #/components/schemas/PersonUpdate
type PersonUpdate struct {
	ID        int       `json:"id"`
	FirstName string    `json:"firstName"`
	LastName  string    `json:"lastName"`
	Email     string    `json:"email"`
	Salary    float32   `json:"salary"`
	BirthDate time.Time `json:"birthDate"`
}

// GetID returns the value of ID.
func (s *PersonUpdate) GetID() int {
	return s.ID
}

// GetFirstName returns the value of FirstName.
func (s *PersonUpdate) GetFirstName() string {
	return s.FirstName
}

// GetLastName returns the value of LastName.
func (s *PersonUpdate) GetLastName() string {
	return s.LastName
}

// GetEmail returns the value of Email.
func (s *PersonUpdate) GetEmail() string {
	return s.Email
}

// GetSalary returns the value of Salary.
func (s *PersonUpdate) GetSalary() float32 {
	return s.Salary
}

// GetBirthDate returns the value of BirthDate.
func (s *PersonUpdate) GetBirthDate() time.Time {
	return s.BirthDate
}

// SetID sets the value of ID.
func (s *PersonUpdate) SetID(val int) {
	s.ID = val
}

// SetFirstName sets the value of FirstName.
func (s *PersonUpdate) SetFirstName(val string) {
	s.FirstName = val
}

// SetLastName sets the value of LastName.
func (s *PersonUpdate) SetLastName(val string) {
	s.LastName = val
}

// SetEmail sets the value of Email.
func (s *PersonUpdate) SetEmail(val string) {
	s.Email = val
}

// SetSalary sets the value of Salary.
func (s *PersonUpdate) SetSalary(val float32) {
	s.Salary = val
}

// SetBirthDate sets the value of BirthDate.
func (s *PersonUpdate) SetBirthDate(val time.Time) {
	s.BirthDate = val
}

func (*PersonUpdate) updatePersonRes() {}

type R400 struct {
	Code   int    `json:"code"`
	Status string `json:"status"`
	Errors jx.Raw `json:"errors"`
}

// GetCode returns the value of Code.
func (s *R400) GetCode() int {
	return s.Code
}

// GetStatus returns the value of Status.
func (s *R400) GetStatus() string {
	return s.Status
}

// GetErrors returns the value of Errors.
func (s *R400) GetErrors() jx.Raw {
	return s.Errors
}

// SetCode sets the value of Code.
func (s *R400) SetCode(val int) {
	s.Code = val
}

// SetStatus sets the value of Status.
func (s *R400) SetStatus(val string) {
	s.Status = val
}

// SetErrors sets the value of Errors.
func (s *R400) SetErrors(val jx.Raw) {
	s.Errors = val
}

func (*R400) createPersonRes() {}
func (*R400) deletePersonRes() {}
func (*R400) listPersonRes()   {}
func (*R400) readPersonRes()   {}
func (*R400) updatePersonRes() {}

type R404 struct {
	Code   int    `json:"code"`
	Status string `json:"status"`
	Errors jx.Raw `json:"errors"`
}

// GetCode returns the value of Code.
func (s *R404) GetCode() int {
	return s.Code
}

// GetStatus returns the value of Status.
func (s *R404) GetStatus() string {
	return s.Status
}

// GetErrors returns the value of Errors.
func (s *R404) GetErrors() jx.Raw {
	return s.Errors
}

// SetCode sets the value of Code.
func (s *R404) SetCode(val int) {
	s.Code = val
}

// SetStatus sets the value of Status.
func (s *R404) SetStatus(val string) {
	s.Status = val
}

// SetErrors sets the value of Errors.
func (s *R404) SetErrors(val jx.Raw) {
	s.Errors = val
}

func (*R404) deletePersonRes() {}
func (*R404) listPersonRes()   {}
func (*R404) readPersonRes()   {}
func (*R404) updatePersonRes() {}

type R409 struct {
	Code   int    `json:"code"`
	Status string `json:"status"`
	Errors jx.Raw `json:"errors"`
}

// GetCode returns the value of Code.
func (s *R409) GetCode() int {
	return s.Code
}

// GetStatus returns the value of Status.
func (s *R409) GetStatus() string {
	return s.Status
}

// GetErrors returns the value of Errors.
func (s *R409) GetErrors() jx.Raw {
	return s.Errors
}

// SetCode sets the value of Code.
func (s *R409) SetCode(val int) {
	s.Code = val
}

// SetStatus sets the value of Status.
func (s *R409) SetStatus(val string) {
	s.Status = val
}

// SetErrors sets the value of Errors.
func (s *R409) SetErrors(val jx.Raw) {
	s.Errors = val
}

func (*R409) createPersonRes() {}
func (*R409) deletePersonRes() {}
func (*R409) listPersonRes()   {}
func (*R409) readPersonRes()   {}
func (*R409) updatePersonRes() {}

type R500 struct {
	Code   int    `json:"code"`
	Status string `json:"status"`
	Errors jx.Raw `json:"errors"`
}

// GetCode returns the value of Code.
func (s *R500) GetCode() int {
	return s.Code
}

// GetStatus returns the value of Status.
func (s *R500) GetStatus() string {
	return s.Status
}

// GetErrors returns the value of Errors.
func (s *R500) GetErrors() jx.Raw {
	return s.Errors
}

// SetCode sets the value of Code.
func (s *R500) SetCode(val int) {
	s.Code = val
}

// SetStatus sets the value of Status.
func (s *R500) SetStatus(val string) {
	s.Status = val
}

// SetErrors sets the value of Errors.
func (s *R500) SetErrors(val jx.Raw) {
	s.Errors = val
}

func (*R500) createPersonRes() {}
func (*R500) deletePersonRes() {}
func (*R500) listPersonRes()   {}
func (*R500) readPersonRes()   {}
func (*R500) updatePersonRes() {}

type UpdatePersonReq struct {
	FirstName OptString   `json:"firstName"`
	LastName  OptString   `json:"lastName"`
	Email     OptString   `json:"email"`
	Salary    OptFloat32  `json:"salary"`
	BirthDate OptDateTime `json:"birthDate"`
}

// GetFirstName returns the value of FirstName.
func (s *UpdatePersonReq) GetFirstName() OptString {
	return s.FirstName
}

// GetLastName returns the value of LastName.
func (s *UpdatePersonReq) GetLastName() OptString {
	return s.LastName
}

// GetEmail returns the value of Email.
func (s *UpdatePersonReq) GetEmail() OptString {
	return s.Email
}

// GetSalary returns the value of Salary.
func (s *UpdatePersonReq) GetSalary() OptFloat32 {
	return s.Salary
}

// GetBirthDate returns the value of BirthDate.
func (s *UpdatePersonReq) GetBirthDate() OptDateTime {
	return s.BirthDate
}

// SetFirstName sets the value of FirstName.
func (s *UpdatePersonReq) SetFirstName(val OptString) {
	s.FirstName = val
}

// SetLastName sets the value of LastName.
func (s *UpdatePersonReq) SetLastName(val OptString) {
	s.LastName = val
}

// SetEmail sets the value of Email.
func (s *UpdatePersonReq) SetEmail(val OptString) {
	s.Email = val
}

// SetSalary sets the value of Salary.
func (s *UpdatePersonReq) SetSalary(val OptFloat32) {
	s.Salary = val
}

// SetBirthDate sets the value of BirthDate.
func (s *UpdatePersonReq) SetBirthDate(val OptDateTime) {
	s.BirthDate = val
}
