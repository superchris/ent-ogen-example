// Code generated by ent, DO NOT EDIT.

package ogent

import "github.com/superchris/ent-ogen-example/ent"

func NewPersonCreate(e *ent.Person) *PersonCreate {
	if e == nil {
		return nil
	}
	var ret PersonCreate
	ret.ID = e.ID
	ret.FirstName = e.FirstName
	ret.LastName = e.LastName
	ret.Email = e.Email
	ret.Salary = e.Salary
	ret.BirthDate = e.BirthDate
	return &ret
}

func NewPersonCreates(es []*ent.Person) []PersonCreate {
	if len(es) == 0 {
		return nil
	}
	r := make([]PersonCreate, len(es))
	for i, e := range es {
		r[i] = NewPersonCreate(e).Elem()
	}
	return r
}

func (pe *PersonCreate) Elem() PersonCreate {
	if pe == nil {
		return PersonCreate{}
	}
	return *pe
}

func NewPersonList(e *ent.Person) *PersonList {
	if e == nil {
		return nil
	}
	var ret PersonList
	ret.ID = e.ID
	ret.FirstName = e.FirstName
	ret.LastName = e.LastName
	ret.Email = e.Email
	ret.Salary = e.Salary
	ret.BirthDate = e.BirthDate
	return &ret
}

func NewPersonLists(es []*ent.Person) []PersonList {
	if len(es) == 0 {
		return nil
	}
	r := make([]PersonList, len(es))
	for i, e := range es {
		r[i] = NewPersonList(e).Elem()
	}
	return r
}

func (pe *PersonList) Elem() PersonList {
	if pe == nil {
		return PersonList{}
	}
	return *pe
}

func NewPersonRead(e *ent.Person) *PersonRead {
	if e == nil {
		return nil
	}
	var ret PersonRead
	ret.ID = e.ID
	ret.FirstName = e.FirstName
	ret.LastName = e.LastName
	ret.Email = e.Email
	ret.Salary = e.Salary
	ret.BirthDate = e.BirthDate
	return &ret
}

func NewPersonReads(es []*ent.Person) []PersonRead {
	if len(es) == 0 {
		return nil
	}
	r := make([]PersonRead, len(es))
	for i, e := range es {
		r[i] = NewPersonRead(e).Elem()
	}
	return r
}

func (pe *PersonRead) Elem() PersonRead {
	if pe == nil {
		return PersonRead{}
	}
	return *pe
}

func NewPersonUpdate(e *ent.Person) *PersonUpdate {
	if e == nil {
		return nil
	}
	var ret PersonUpdate
	ret.ID = e.ID
	ret.FirstName = e.FirstName
	ret.LastName = e.LastName
	ret.Email = e.Email
	ret.Salary = e.Salary
	ret.BirthDate = e.BirthDate
	return &ret
}

func NewPersonUpdates(es []*ent.Person) []PersonUpdate {
	if len(es) == 0 {
		return nil
	}
	r := make([]PersonUpdate, len(es))
	for i, e := range es {
		r[i] = NewPersonUpdate(e).Elem()
	}
	return r
}

func (pe *PersonUpdate) Elem() PersonUpdate {
	if pe == nil {
		return PersonUpdate{}
	}
	return *pe
}
